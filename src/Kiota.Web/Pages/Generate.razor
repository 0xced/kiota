@page "/generate"
@using Kiota.Builder
@using Kiota.Builder.Configuration
@using System.Linq
@using System.IO
@using System.IO.Compression
@using System.Security.Cryptography
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization;
@using System.Threading
@using Microsoft.Fast.Components.FluentUI
@inject HttpClient Http
@inject ILoggerFactory LoggerFactory
@inject IJSRuntime JSRuntime
@using System.Globalization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Generate> Loc


<PageTitle>@Loc["PageTitle"]</PageTitle>

<h1>@Loc["Generate"]</h1>

<div>
    <div class="form-group">
        <div class="form-row">
            <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-6">
                <label for="descriptionUrl">@Loc["DescriptionUrl"]</label>
                <input id="descriptionUrl" type="text" @bind="DescriptionUrl" class="form-control" />
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-6">
                <label for="namespaceName">@Loc["NamespacePrefix"]</label>
                <input id="namespaceName" type="text" @bind="NamespaceName" class="form-control" />
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-6">
                <label for="clientClassName">@Loc["ClientClassName"]</label>
                <input id="clientClassName" type="text" @bind="ClientClassName" class="form-control" />
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="form-row">
            <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-6">
                <label for="includePatterns">@Loc["IncludePatterns"]</label>
                <textarea id="includePatterns" type="text" @bind="IncludePatterns" class="form-control" rows="5"></textarea>
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-6">
                <label for="excludePatterns">@Loc["ExcludePatterns"]</label>
                <textarea id="excludePatterns" type="text" @bind="ExcludePatterns" class="form-control" rows="5"></textarea>
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-6">
                <label for="language">@Loc["Language"]</label>
                <select id="language" type="text" @bind="Language" class="form-control">
                    @foreach (var item in Enum.GetValues(typeof(GenerationLanguage)))
                    {
                        <option value="@item">@item</option>
                    }
                </select>
            </div>
        </div>
        <div>
            <div class="custom-control custom-checkbox">
                <input id="additionalData" type="checkbox" @bind="AdditionalData" class="custom-control-input" />
                <label for="additionalData" class="custom-control-label">@Loc["AdditionalData"]</label>
            </div>
        </div>
        <div>
            <div class="custom-control custom-checkbox">
                <input id="backingStore" type="checkbox" @bind="BackingStore" class="custom-control-input" />
                <label for="backingStore" class="custom-control-label">@Loc["BackingStore"]</label>
            </div>
        </div>
    </div>
    <FluentButton @onclick="GenerateClient" Appearance="Appearance.Accent" Disabled="@(string.IsNullOrEmpty(DescriptionUrl) || IsLoading)">@Loc["GenerateAction"]</FluentButton>
    <FluentButton @onclick="DownloadClient" Appearance="Appearance.Neutral" Disabled="@string.IsNullOrEmpty(DownloadUrl)">@Loc["Download"]</FluentButton>
</div>

@if(IsLoading) {
    <div class="spinner-border" role="status">
        <span class="sr-only">@Loc["Loading"]</span>
    </div>
}



@if(!string.IsNullOrEmpty(Dependencies)) {
    <div>
        <h2>@Loc["Dependencies"]</h2>
        <pre>@Dependencies</pre>
    </div>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "c")]
    public string? ClientClassNameFromQuery { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "n")]
    public string? NamespaceNameFromQuery { get; set; }
    private string? ClientClassName { get; set; }
    private string? NamespaceName { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "b")]
    public string? BackingStoreFromQuery { get; set; }
    private bool BackingStore { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "ad")]
    public string? AdditionalDataFromQuery { get; set; }
    private bool AdditionalData { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "d")]
    public string? DescriptionUrlFromQuery { get; set; }
    private string? DescriptionUrl { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "i")]
    public string? IncludePatternsFromQuery { get; set; }
    private string? IncludePatterns { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "e")]
    public string? ExcludePatternsFromQuery { get; set; }
    private string? ExcludePatterns { get; set; }
    private GenerationLanguage? Language { get; set; }
    private string? OutputPath { get; set; }
    private string? DownloadUrl { get; set; }
    private bool IsLoading { get; set; }
    private string? Dependencies { get; set; }
    protected override void OnParametersSet() {
        if(!string.IsNullOrEmpty(DescriptionUrlFromQuery))
            DescriptionUrl = DescriptionUrlFromQuery;
        if(!string.IsNullOrEmpty(IncludePatternsFromQuery))
            IncludePatterns = string.Join(Environment.NewLine, IncludePatternsFromQuery.Split(',', StringSplitOptions.RemoveEmptyEntries));
        if(!string.IsNullOrEmpty(ExcludePatternsFromQuery))
            ExcludePatterns = string.Join(Environment.NewLine, ExcludePatternsFromQuery.Split(',', StringSplitOptions.RemoveEmptyEntries));

        var defaultConfiguration = new GenerationConfiguration();

        if(!string.IsNullOrEmpty(AdditionalDataFromQuery) && bool.TryParse(AdditionalDataFromQuery, out var additionalData))
            AdditionalData = additionalData;
        else 
            AdditionalData = defaultConfiguration.IncludeAdditionalData;
        
        if(!string.IsNullOrEmpty(BackingStoreFromQuery) && bool.TryParse(BackingStoreFromQuery, out var backingStore))
            BackingStore = backingStore;
        else 
            BackingStore = defaultConfiguration.UsesBackingStore;

        if(!string.IsNullOrEmpty(ClientClassNameFromQuery))
            ClientClassName = ClientClassNameFromQuery;
        else 
            ClientClassName = defaultConfiguration.ClientClassName;

        if(!string.IsNullOrEmpty(NamespaceNameFromQuery))
            NamespaceName = NamespaceNameFromQuery;
        else 
            NamespaceName = defaultConfiguration.ClientNamespaceName;
            
        base.OnParametersSet();
    }
    private static readonly ThreadLocal<HashAlgorithm> HashAlgorithm = new(() => SHA256.Create());
    private async Task GenerateClient() {
        DownloadUrl = string.Empty;
        Dependencies = string.Empty;
        if (!string.IsNullOrEmpty(DescriptionUrl)) {
            IsLoading = true;
            var hashedUrl = BitConverter.ToString(HashAlgorithm.Value!.ComputeHash(Encoding.UTF8.GetBytes(DescriptionUrl!.ToString()))).Replace("-", string.Empty);
            OutputPath = Path.Combine(Path.GetTempPath(), "kiota", "generation", hashedUrl);
            var generationConfiguration = new GenerationConfiguration{
                OpenAPIFilePath = DescriptionUrl,
                IncludePatterns = IncludePatterns?.Split(Environment.NewLine, StringSplitOptions.RemoveEmptyEntries).Select(static x => x.Trim()).ToHashSet(),
                ExcludePatterns = ExcludePatterns?.Split(Environment.NewLine, StringSplitOptions.RemoveEmptyEntries).Select(static x => x.Trim()).ToHashSet(),
                Language = Language ?? GenerationLanguage.CSharp,
                OutputPath = OutputPath,
                ClientClassName = ClientClassName,
                ClientNamespaceName = NamespaceName,
                IncludeAdditionalData = AdditionalData,
                UsesBackingStore = BackingStore
            };
            var builderLogger = LoggerFactory.CreateLogger<KiotaBuilder>();
            var builder = new KiotaBuilder(builderLogger, generationConfiguration);
            await builder.GenerateClientAsync(ComponentDetached);
            var zipFilePath = Path.Combine(Path.GetTempPath(), "kiota", "clients", hashedUrl, "client.zip");
            if (File.Exists(zipFilePath))
                File.Delete(zipFilePath);
            else
                Directory.CreateDirectory(Path.GetDirectoryName(zipFilePath)!);
            ZipFile.CreateFromDirectory(OutputPath, zipFilePath);
            DownloadUrl = zipFilePath;
            var informationSource = await builder.GetLanguageInformationAsync(ComponentDetached) ?? (await GetConfiguration(ComponentDetached))?.Languages;
            if (informationSource?.TryGetValue(generationConfiguration.Language.ToString(), out var languageInformation) ?? false) {
                foreach(var dependency in languageInformation.Dependencies)
                    Dependencies += $"{string.Format(languageInformation.DependencyInstallCommand, dependency.Name, dependency.Version)}{Environment.NewLine}";
            }
            IsLoading = false;
        }
    }
    private async Task DownloadClient() {
        if (!string.IsNullOrEmpty(DownloadUrl)) {
            using var fileStream = File.OpenRead(DownloadUrl);
            using var ms = new MemoryStream();
            await fileStream.CopyToAsync(ms);
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", "client.zip", "application/zip", ms.ToArray());
        }
    }
    private Task<KiotaConfiguration?> GetConfiguration(CancellationToken cancellationToken) {
        return Http.GetFromJsonAsync<KiotaConfiguration>(
            "appsettings.json",
            new JsonSerializerOptions{
                Converters ={
                    new JsonStringEnumConverter( JsonNamingPolicy.CamelCase)
                },
                
            },
            cancellationToken);
    }
}
